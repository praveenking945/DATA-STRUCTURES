#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

struct Stack {
    int arr[MAX_SIZE];
    int top;
};

void initialize(struct Stack *stack) {
    stack->top = -1;
}

int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow - Cannot push element.\n");
        return;
    }
    stack->top++;
    stack->arr[stack->top] = value;
}

int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow - Cannot pop element.\n");
        return -1;
    }
    int value = stack->arr[stack->top];
    stack->top--;
    return value;
}

int peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty - Cannot peek.\n");
        return -1;
    }
    return stack->arr[stack->top];
}

int main() {
    struct Stack stack;
    initialize(&stack);

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    printf("Top element: %d\n", peek(&stack));

    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Popped element: %d\n", pop(&stack));

    printf("Is stack empty? %s\n", isEmpty(&stack) ? "Yes" : "No");

    return 0;
}



Output:

Top element: 30
Popped element: 30
Popped element: 20
Popped element: 10
Is stack empty? Yes

--------------------------------
Process exited after 2.543 seconds with return value 0
Press any key to continue . . .
